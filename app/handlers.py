from aiogram import F, Router
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from app.database.requests import is_register
from app.database.models import async_session
from app.database.models import User, Flag
from sqlalchemy import select, update, delete

from dotenv import load_dotenv

import json
import os



class Registration(StatesGroup):
    name = State()


class Send_Flag(StatesGroup):
    Flag = State()


load_dotenv()
router = Router()


@router.message(CommandStart())
async def start(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç zelCTF üòé, –∫–∏–¥–∞–π –º–Ω–µ —Ñ–ª–∞–≥ –∏ –ø–æ–ª—É—á–∞–π –±–∞–ª–ª—ã ! –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /help")


@router.message(Command('registration'))
async def start(message: Message, state: FSMContext):
    tg_id = message.from_user.id
    async with async_session() as session:
        id = await session.scalar(select(User).where(User.tg_id == tg_id))
        if not id:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º:')
            await state.set_state(Registration.name)
        else:
            await message.answer(f'–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã !')
            await state.clear()

@router.message(Registration.name)
async def register2(message: Message, state: FSMContext):
    username = message.text
    tg_id = message.from_user.id
    async with async_session() as session:
        id = await session.scalar(select(User).where(User.tg_id == tg_id))
        is_user = await session.scalar(select(User).where(User.username == username))
        if not id and not is_user:
            session.add(User(tg_id=tg_id, username=username, flag_count=0))
            await session.commit()
            await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ! üéâ')
            await state.clear()
        elif not id and is_user:
            await message.answer('–î–∞–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /registration')
            await state.clear()


@router.message(Command('submit_flag'))
async def submit_flag(message: Message, state: FSMContext):
    is_reg = await is_register(message.from_user.id)
    if is_reg == "0":
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã ! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ /registration")
    elif is_reg == '1':
        await message.answer('–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–ª–∞–≥ üö©')
        await state.set_state(Send_Flag.Flag)

@router.message(Send_Flag.Flag)
async def register2(message: Message, state: FSMContext):
    tg_id = message.from_user.id
    flag = message.text
    flag_list = json.loads(os.environ['FLAGS'])
    if flag in flag_list:

        async with async_session() as session:
            user_state = await session.scalar(select(Flag).where(Flag.tg_id == tg_id, Flag.flag == flag))
            if user_state:
                await message.answer('–§–ª–∞–≥ —É–∂–µ —Å–¥–∞–Ω !')
                await state.clear()
            else:
                session.add(Flag(tg_id=tg_id, flag=flag))
                user = await session.scalar(select(User).where(User.tg_id == tg_id))
                user.flag_count += 1
                await session.commit()
                await message.answer('–û—Ç–ª–∏—á–Ω–æ, —Ñ–ª–∞–≥ –≤–µ—Ä–Ω—ã–π !')
                await state.clear()

    elif flag not in flag_list:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–ª–∞–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ! ‚ùå')


@router.message(Command('profile'))
async def submit_flag(message: Message):
    is_reg = await is_register(message.from_user.id)
    if is_reg == "0":
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã ! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ /registration")
    elif is_reg == '1':
        async with async_session() as session:
            tg_id = message.from_user.id
            user = await session.scalar(select(User).where(User.tg_id == tg_id))
            await message.answer(f'üîí –ü—Ä–æ—Ñ–∏–ª—å:\n\nüòé –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}\nüö© –ö–æ–ª-–≤–æ —Å–¥–∞–Ω–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤: {user.flag_count}\n')


@router.message(Command('help'))
async def help(message: Message):
        await message.answer("/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
                             "/registration - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞\n"
                             "/submit_flag - —Å–¥–∞—á–∞ —Ñ–ª–∞–≥–∞\n"
                             "/scoreboard - —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                             "/profile - –ø—Ä–æ—Ñ–∏–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞\n")

@router.message()
async def echo(messange: Message):
    await messange.answer('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –î–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /help')